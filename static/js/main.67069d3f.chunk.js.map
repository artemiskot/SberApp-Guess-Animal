{"version":3,"sources":["lionpic.jpg","hear.jpg","opisanie.jpg","media.js","Home.js","Timer.js","Game.js","APIHelper.js","App.js","reportWebVitals.js","GlobalStyle.tsx","index.js"],"names":["useMediaQuery","query","mediaMatch","window","matchMedia","useState","matches","setMatches","useEffect","handler","e","addListener","removeListener","Home","mode","setPlayOrPractice","playOrPractice","linkToGame","setCounter","amountOfSolvedQuestions","solvedQuestions","icons","texts","disabled","isRowBased","useHistory","style","display","justifyContent","marginBottom","marginTop","focus","outlined","size","view","scaleOnPress","focus-visible","map","_","i","isActive","tabIndex","contentLeft","onClick","flexDirection","alignItems","width","margin","src","lion","height","text","scaleOnInteraction","stretch","current","opisanie","format","time","minutes","Math","floor","seconds","padTime","customStyles","content","color","backgroundColor","background","backgroundImage","gradient","top","left","right","bottom","marginRight","transform","borderRadius","padding","Timer","subtitle","counter","history","React","modalIsOpen","setIsOpen","counterRest","setCounterRest","timer","setTimeout","c","clearTimeout","push","ariaHideApp","isOpen","onAfterOpen","ref","_subtitle","textAlign","String","length","Game","answer","assistant","generateNewAnimal","processCard","picture","sumTime","ans","setAns","status","isListening","isPlaying","playButtonText","setPlayButtonText","sendData","action","action_id","payload","param","scaleOnFocus","ratio","cover","value","label","undefined","onChange","v","target","toLowerCase","lines","renderMode","API_URL","a","axios","get","params","data","console","log","withRouter","sound","setSound","useSound","volume","play","stop","useRef","name","setName","setPicture","setText","useToast","showToast","hideToast","setSumTime","refAnswer","refName","getRandomAnimal","then","x","id","description","getState","createAssistant","on","event","dispatchAssistantAction","type","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","ThemeStyle","darkSber","GlobalStyle","ReactDOM","render","Device","document","getElementById"],"mappings":"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","file":"static/js/main.67069d3f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lionpic.e6022f19.jpg\";","export default __webpack_public_path__ + \"static/media/hear.32c7908f.jpg\";","export default __webpack_public_path__ + \"static/media/opisanie.5766be14.jpg\";","import { useEffect, useState } from \"react\";\r\n\r\nexport const useMediaQuery = (query) => {\r\n  const mediaMatch = window.matchMedia(query);\r\n  const [matches, setMatches] = useState(mediaMatch.matches);\r\n\r\n  useEffect(() => {\r\n    const handler = (e) => setMatches(e.matches);\r\n    mediaMatch.addListener(handler);\r\n    return () => mediaMatch.removeListener(handler);\r\n  });\r\n  return matches;\r\n};\r\n","import hear from \"./hear.jpg\";\r\nimport lion from \"./lionpic.jpg\";\r\nimport opisanie from \"./opisanie.jpg\";\r\nimport { IconRefresh } from \"@sberdevices/plasma-icons\";\r\nimport { IconTimerFill } from \"@sberdevices/plasma-icons\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { useMediaQuery } from \"./media\";\r\n\r\nimport { Container } from \"@sberdevices/plasma-ui/components/Grid\";\r\nimport { Button, P } from \"@sberdevices/plasma-ui\";\r\nimport { Display3,Row,Col } from \"@sberdevices/plasma-ui\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Icon,\r\n  CardBody,\r\n  CardContent,\r\n  CardMedia,\r\n  Tabs,\r\n  TabItem,\r\n  TextBoxSubTitle,\r\n  TextBoxBiggerTitle,\r\n  TextBoxBigTitle,\r\n  TextBox,\r\n} from \"@sberdevices/plasma-ui\";\r\nconst Home = ({\r\n  mode,\r\n  setPlayOrPractice,\r\n  playOrPractice,\r\n  setCounter,\r\n  amountOfSolvedQuestions,\r\n  solvedQuestions,\r\n  linkToGame,\r\n}) => {\r\n  const icons = [<IconRefresh />, <IconTimerFill />];\r\n  const outlined = false;\r\n  const items = [0, 0];\r\n  const texts = [\"Режим тренировки\", \"Режим игровой\"];\r\n  const disabled = false;\r\n  const history = useHistory();\r\n\r\n  const isRowBased = useMediaQuery(\"(min-width: 1000px)\");\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-around\",\r\n          marginBottom: \"0.5rem\",\r\n          marginTop: \"1rem\",\r\n        }}\r\n      >\r\n        <Display3>Отгадай Животное</Display3>\r\n      </div>\r\n      <div\r\n        focus={true}\r\n        outlined={true}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              marginBottom: \"0.5rem\",\r\n              }}\r\n      >\r\n          <Tabs\r\n            size={isRowBased ? \"l\" : \"s\"}\r\n            view={\"secondary\"}\r\n            scaleOnPress={true}   \r\n            outlined={true}\r\n            //outlined={!disabled && outlined}\r\n            disabled={disabled}\r\n            focus-visible={true}\r\n\r\n            //focused={true}\r\n          >\r\n            {items.map((_, i) => (\r\n              <TabItem\r\n                key={`item:${i}`}\r\n                isActive={i === playOrPractice}\r\n                tabIndex={!disabled ? i : -1}\r\n                contentLeft={icons[i]}\r\n                onClick={() => !disabled && setPlayOrPractice(i)}\r\n              >\r\n                {texts[i]}\r\n              </TabItem>\r\n            ))}\r\n          </Tabs>\r\n        </div>\r\n\r\n      <div\r\n        style={{\r\n          flexDirection: isRowBased ? \"row\" : \"column\",\r\n          marginBottom: isRowBased ? \"0rem\" : \"10rem\",\r\n          display: \"flex\",\r\n          //justifyContent: \"center\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          //flexGrow: \"1\",\r\n          //flexShrink: \"1\",\r\n          marginBottom: \"10rem\",\r\n        }}\r\n      >\r\n        <Card\r\n          style={{\r\n            display: \"flex\",\r\n            width: \"18.5rem\",\r\n            margin: \"0.5rem\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <CardBody>\r\n            <CardMedia src={lion} height={\"9rem\"}/>\r\n            <CardContent>\r\n              <TextBox>\r\n                <TextBoxBigTitle>{\"Угадай по фото\"}</TextBoxBigTitle>\r\n                <TextBoxSubTitle>\r\n                  {\r\n                    \"Необходимо понять о каком животном идет речь по изображению\"\r\n                  }\r\n                </TextBoxSubTitle>\r\n              </TextBox>\r\n              <Button\r\n                text=\"Начать\"\r\n                view=\"primary\"\r\n                size=\"s\"\r\n                scaleOnInteraction={true}\r\n                outlined={true}\r\n                stretch\r\n                style={{ marginTop: \"1em\" }}\r\n                tabIndex={-1}\r\n                onClick={() => {\r\n                  mode.current = 0; \r\n                  linkToGame();\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </CardBody>\r\n        </Card>\r\n        <Card style={{ width: \"18.5rem\", margin: \"0.5rem\" }}>\r\n          <CardBody>\r\n            <CardMedia src={opisanie} height={\"9rem\"} />\r\n            <CardContent>\r\n              <TextBox>\r\n                <TextBoxBigTitle>{\"Угадай по описанию\"}</TextBoxBigTitle>\r\n\r\n                <TextBoxSubTitle>\r\n                  {\r\n                    \"Необходимо понять о каком животном идет речь по текстовому описанию\"\r\n                  }\r\n                </TextBoxSubTitle>\r\n              </TextBox>\r\n              <Button\r\n                text=\"Начать\"\r\n                view=\"primary\"\r\n                size=\"s\"\r\n                scaleOnInteraction={true}\r\n                outlined={true}\r\n                stretch\r\n                style={{ marginTop: \"1em\" }}\r\n                tabIndex={-1}\r\n                onClick={() => {\r\n                  mode.current = 1;\r\n                  linkToGame();\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Modal from \"react-modal\";\r\nimport { Button } from \"@sberdevices/plasma-ui\";\r\n\r\nimport { text, background, gradient } from \"@sberdevices/plasma-tokens\";\r\nimport { IconHouse } from \"@sberdevices/plasma-icons\";\r\nimport \"./Modal.css\";\r\n\r\nimport { Headline2 } from \"@sberdevices/plasma-ui\";\r\nimport { BrowserRouter as Router, useHistory } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nconst format = (time) => {\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time % 60;\r\n  return `${minutes}:${padTime(seconds)}`;\r\n};\r\nconst customStyles = {\r\n  content: {\r\n    color: `${text}`,\r\n    backgroundColor: `${background}`,\r\n    backgroundImage: `${gradient}`,\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"auto\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    borderRadius: \"1em\",\r\n    padding: \"1em\",\r\n    width: \"30rem\",\r\n  },\r\n};\r\n\r\nexport const Timer = ({ counter, setCounter, amountOfSolvedQuestions }) => {\r\n  const history = useHistory();\r\n\r\n  var subtitle;\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n\r\n  function afterOpenModal() {\r\n    subtitle.style.color = \"\";\r\n    setCounterRest(7);\r\n  }\r\n\r\n  const [counterRest, setCounterRest] = React.useState(30);\r\n  React.useEffect(() => {\r\n    setCounter(counter);\r\n  }, [counter]);\r\n  React.useEffect(() => {\r\n    let timer;\r\n    if (counter > 0) {\r\n      timer = setTimeout(() => setCounter((c) => c - 1), 1000);\r\n    } else if (counter === 0) {\r\n      setIsOpen(true);\r\n    }\r\n    return () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, [counter]);\r\n  React.useEffect(() => {\r\n    let timer;\r\n    if (counterRest > 0) {\r\n      timer = setTimeout(() => setCounterRest((c) => c - 1), 1000);\r\n    } else if (counter === 0) {\r\n      history.push(\"/\");\r\n      setIsOpen(false);\r\n      setCounter(counter);\r\n    }\r\n    return () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, [counterRest]);\r\n  return (\r\n    <div>\r\n      {counter !== 0 && (\r\n        <Headline2 style={{ marginTop: \"1rem\" }}>\r\n          Время: {format(counter)}\r\n        </Headline2>\r\n      )}\r\n      <div>\r\n        <Modal\r\n          ariaHideApp={false}\r\n          isOpen={modalIsOpen}\r\n          onAfterOpen={afterOpenModal}\r\n          style={customStyles}\r\n        >\r\n          <h2\r\n            ref={(_subtitle) => (subtitle = _subtitle)}\r\n            style={{ textAlign: \"center\" }}\r\n          >\r\n            Ой-ой, время вышло!\r\n          </h2>\r\n          <h3\r\n            ref={(_subtitle) => (subtitle = _subtitle)}\r\n            style={{ textAlign: \"center\" }}\r\n          >\r\n            Правильно {amountOfSolvedQuestions.current - 1} из 10\r\n          </h3>\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <Headline2>Возврат домой через</Headline2>\r\n            <br />\r\n            {counterRest !== 0 && <Headline2>{format(counterRest)}</Headline2>}\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst padTime = (time) => {\r\n  return String(time).length === 1 ? `0${time}` : `${time}`;\r\n};\r\n","import { Container } from \"@sberdevices/plasma-ui/components/Grid\";\r\nimport { Timer } from \"./Timer\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Row, Col } from \"@sberdevices/plasma-ui\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMediaQuery } from \"./media\";\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardContent,\r\n  CardMedia,\r\n  CardHeadline1,\r\n  Button,\r\n  TextBox,\r\n  cover,\r\n  TextBoxBiggerTitle,\r\n  TextBoxSubTitle,\r\n  TextBoxBigTitle,\r\n  TextField,\r\n  CardParagraph1,\r\n  Headline4,\r\n} from \"@sberdevices/plasma-ui\";\r\nimport { IconVolumeAlt2 } from \"@sberdevices/plasma-icons\";\r\n\r\nconst Game = ({\r\n  mode,\r\n  playOrPractice,\r\n  answer,\r\n  assistant,\r\n  generateNewAnimal,\r\n  amountOfSolvedQuestions,\r\n  processCard,\r\n  picture,\r\n  text,\r\n  sumTime,\r\n  ans,\r\n  setAns,\r\n  setCounter,\r\n  counter,\r\n  isListening,\r\n  isPlaying,\r\n  playButtonText,\r\n  setPlayButtonText\r\n}) => {\r\n  const status = [\"success\", \"error\", \"\"];\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    generateNewAnimal();\r\n  }, []);\r\n  useEffect(() => {\r\n    answer.current = ans;\r\n  }, [ans]);\r\n  useEffect(() => {\r\n    if (amountOfSolvedQuestions.current > 10) {\r\n      {\r\n        assistant.current?.sendData({\r\n          action: { action_id: \"gamefinish\", payload: {} },\r\n        });\r\n      }\r\n    }\r\n  }, [amountOfSolvedQuestions.current]);\r\n  const isRowBased = useMediaQuery(\"(min-width: 1000px)\");\r\n\r\n  const renderMode = (param) => {\r\n    switch (param) {\r\n      case 0:\r\n        return (\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Card\r\n              style={{\r\n                width: isRowBased ? \"22rem\" : \"18rem\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n              tabIndex={-1}\r\n              outlined={false}\r\n              scaleOnFocus={false}\r\n            >\r\n              <CardBody>\r\n                <CardMedia ratio=\"2/1\" src={picture} />\r\n                <CardContent cover={cover}>\r\n                  <TextBox>\r\n                    <TextBoxBigTitle>{\"Какое это животное?\"}</TextBoxBigTitle>\r\n                  </TextBox>\r\n                  <TextField\r\n                    style={{ marginTop: \"1rem\" }}\r\n                    value={ans}\r\n                    label={\"Ответ\"}\r\n                    //   helperText={\"Helper text\"}\r\n                    disabled={false}\r\n                    status={status !== \"\" ? status : undefined}\r\n                    onChange={(v) => setAns(v.target.value.toLowerCase())}\r\n                  />\r\n                  <Button\r\n                    style={{ marginTop: \"1rem\" }}\r\n                    onClick={() => {\r\n                      processCard();\r\n                    }}\r\n                  >\r\n                    Ответить\r\n                  </Button>\r\n                </CardContent>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        );\r\n      case 1:\r\n        return (\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Card\r\n              style={{\r\n                width: isRowBased ? \"30rem\" : \"20rem\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n              tabIndex={-1}\r\n              outlined={false}\r\n              scaleOnFocus={false}\r\n            >\r\n              <CardBody>\r\n                {/* <CardMedia style={{ width: \"30rem\" }} src={picture} /> */}\r\n                <CardContent cover={cover}>\r\n                  <TextBox>\r\n                    <CardParagraph1 style={{ marginTop: \"0.75rem\" }} lines={6}>\r\n                      <Headline4>\r\n                        <em>{text}</em>\r\n                      </Headline4>\r\n                    </CardParagraph1>\r\n\r\n                    <TextBoxBigTitle style={{ marginTop: \"2rem\" }}>\r\n                      {\"Какое это животное?\"}\r\n                    </TextBoxBigTitle>\r\n                  </TextBox>\r\n                  <TextField\r\n                    style={{ marginTop: \"1rem\" }}\r\n                    value={ans}\r\n                    label={\"Ответ\"}\r\n                    //   helperText={\"Helper text\"}\r\n                    disabled={false}\r\n                    status={status !== \"\" ? status : undefined}\r\n                    onChange={(v) => setAns(v.target.value.toLowerCase())}\r\n                  />\r\n                  <Button\r\n                    style={{ marginTop: \"1rem\" }}\r\n                    onClick={() => {\r\n                      processCard();\r\n                    }}\r\n                  >\r\n                    Ответить\r\n                  </Button>\r\n                </CardContent>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        );\r\n      /*case 2:\r\n        return (\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Card\r\n              style={{\r\n                width: isRowBased ? \"30rem\" : \"20rem\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n              tabIndex={-1}\r\n              outlined={false}\r\n              scaleOnFocus={false}\r\n            >\r\n              <CardBody>\r\n                <CardContent cover={cover}>\r\n                  <Button\r\n                    style={{ marginTop: \"1rem\" }}\r\n                    onClick={() => {\r\n                       isListening();\r\n                    }}\r\n                    text={playButtonText}\r\n                    view={\"primary\"}\r\n                    contentLeft={<IconVolumeAlt2 />}\r\n                  />\r\n                  <TextBox>\r\n                    <TextBoxBigTitle style={{ marginTop: \"1rem\" }}>\r\n                      {\"Какое животное издает этот звук?\"}\r\n                    </TextBoxBigTitle>\r\n                  </TextBox>\r\n                  <TextField\r\n                    style={{ marginTop: \"1rem\" }}\r\n                    value={ans}\r\n                    label={\"Ответ\"}\r\n                    //   helperText={\"Helper text\"}\r\n                    disabled={false}\r\n                    status={status !== \"\" ? status : undefined}\r\n                    onChange={(v) => setAns(v.target.value)}\r\n                  />\r\n                  <Button\r\n                    style={{ marginTop: \"1rem\" }}\r\n                    onClick={() => {\r\n                      processCard();\r\n                    }}\r\n                  >\r\n                    Ответить\r\n                  </Button>\r\n                </CardContent>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        );*/\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container style={{ marginBottom: \"10rem\" }}>\r\n      {amountOfSolvedQuestions.current > 10 ? (\r\n        <div>\r\n          <Container>\r\n            {playOrPractice == 0 ? (\r\n              <h1>Тренировка окончена</h1>\r\n            ) : (\r\n              <div>\r\n                <h1>Игра окончена</h1>\r\n                <h2>Потрачено времени: {sumTime} секунды</h2>\r\n              </div>\r\n            )}\r\n\r\n            <h2>Выучены {amountOfSolvedQuestions.current - 1} животных</h2>\r\n\r\n            <Button\r\n              onClick={() => {\r\n                history.push(\"/\");\r\n                assistant.current?.sendData({\r\n                  action: { action_id: \"goneback\", payload: {} },\r\n                });\r\n              }}\r\n            >\r\n              Домой\r\n            </Button>\r\n          </Container>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {playOrPractice == 0 ? (\r\n            <></>\r\n          ) : (\r\n            <Timer\r\n              style={{ textAlign: \"right\" }}\r\n              counter={counter}\r\n              setCounter={setCounter}\r\n              amountOfSolvedQuestions={amountOfSolvedQuestions}\r\n            />\r\n          )}\r\n          <div>{renderMode(mode)}</div>\r\n        </div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import axios from \"axios\";\r\n\r\nconst API_URL = \"https://animalsquiz.herokuapp.com/\";\r\n\r\nexport async function getRandomAnimal(solvedQuestions) {\r\n  const { data: answer } = await axios.get(API_URL + \"randomAnimal/\", {\r\n    params: {\r\n      solvedQuestions: solvedQuestions,\r\n    },\r\n  });\r\n  console.log(\"приходит\", solvedQuestions);\r\n  return answer;\r\n}\r\n","import Home from \"./Home.js\";\r\nimport Game from \"./Game.js\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { getRandomAnimal } from \"./APIHelper.js\";\r\nimport { Toast } from \"@sberdevices/plasma-ui\";\r\nimport { useToast, Button } from \"@sberdevices/plasma-ui\";\r\nimport useSound from \"use-sound\";\r\n\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport {\r\n  createSmartappDebugger,\r\n  createAssistant,\r\n} from \"@sberdevices/assistant-client\";\r\nconst initializeAssistant = (getState /*: any*/) => {\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    return createSmartappDebugger({\r\n      token:\r\n      process.env.REACT_APP_TOKEN  ??\r\n        \"\",\r\n      initPhrase: `Запусти Отгадай животное`,\r\n      getState,\r\n    });\r\n  }\r\n  return createAssistant({ getState });\r\n};\r\nfunction App() {\r\n  const [counter, setCounter] = useState(40);\r\n  const [sound, setSound] = useState(\"\");\r\n  const [play, { stop, isPlaying }] = useSound(sound, { volume: 0.75 });\r\n  const [playButtonText, setPlayButtonText] = useState(\"Прослушать\");\r\n  const history = useHistory();\r\n  const solvedQuestions = useRef(\"\");\r\n  const amountOfSolvedQuestions = useRef(0);\r\n  const [name, setName] = useState(\"\");\r\n  const [picture, setPicture] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [ans, setAns] = useState(\"\");\r\n  const { showToast, hideToast } = useToast();\r\n  const [sumTime, setSumTime] = useState(0);\r\n  useEffect(() => {\r\n    setSumTime(sumTime + 1);\r\n  }, [counter]);\r\n  useEffect(() => {\r\n    if (!isPlaying) {\r\n      setPlayButtonText(\"Прослушать\");\r\n    }\r\n  }, [isPlaying]); \r\n  const refAnswer = useRef(\"\");\r\n  const refName = useRef();\r\n  const processCard = async () => {\r\n    console.log(\"Ответ юзера\", refAnswer.current);\r\n    console.log(\"Ответ правильный\", name);\r\n\r\n    if (refAnswer.current === refName.current) {\r\n      await generateNewAnimal();\r\n      showToast(`Верно!`, \"top\", 1000);\r\n      setCounter(40);\r\n      refAnswer.current = \"\";\r\n    } else {\r\n      if (playOrPractice == 0) {\r\n        showToast(`Ошибка! Правильный ответ: ${refName.current}`, \"top\");\r\n      } else {\r\n        showToast(\"Ошибка!\", \"top\", 1000);\r\n      }\r\n    }\r\n    setAns(\"\");\r\n  };\r\n  const generateNewAnimal = () => {\r\n    console.log(solvedQuestions.current);\r\n    getRandomAnimal(solvedQuestions.current).then((x) => {\r\n      if (solvedQuestions.current == \"\") {\r\n        solvedQuestions.current += `${x.id}`;\r\n        console.log(solvedQuestions.current);\r\n      } else {\r\n        solvedQuestions.current += \",\" + `${x.id}`;\r\n      }\r\n      amountOfSolvedQuestions.current++;\r\n      console.log(x);\r\n      setPicture(x.picture);\r\n      setName(x.name);\r\n      setText(x.description);\r\n      setSound(x.sound);\r\n      refName.current = x.name;\r\n    });\r\n  };\r\n  const linkToGame = () => {\r\n    console.log(mode.current);\r\n    if(mode.current == 2){\r\n      assistant.current?.sendData({ action: { action_id: \"playSound\", payload: {} } });\r\n    } else{ \r\n      assistant.current?.sendData({ action: { action_id: \"game\", payload: {} } });\r\n    }\r\n\r\n    amountOfSolvedQuestions.current = 0;\r\n    solvedQuestions.current = \"\";\r\n    setCounter(40);\r\n    setSumTime(0);\r\n\r\n    history.push(\"/game\");\r\n  };\r\n  const mode = useRef(0);\r\n  const [playOrPractice, setPlayOrPractice] = useState(0);\r\n  const assistant = useRef();\r\n  useEffect(() => {\r\n    assistant.current = initializeAssistant(() => getStateForAssistant());\r\n    assistant.current.on(\"start\", (event) => {\r\n      //console.log(`assistant.on(start)`, event);\r\n    });\r\n\r\n    assistant.current.on(\"data\", (event /*: any*/) => {\r\n     //console.log(`assistant.on(data)`, event);\r\n      const { action } = event;\r\n\r\n      dispatchAssistantAction(action);\r\n    });\r\n  }, []);\r\n\r\n  function getStateForAssistant() {\r\n    return undefined;\r\n  }\r\n  const  isListening = () => {\r\n    if (isPlaying) {\r\n      stop();\r\n    } else {\r\n      play();\r\n      setPlayButtonText(\"Остановить\");\r\n    }\r\n  }\r\n  const dispatchAssistantAction = async (action) => {\r\n    console.log(\"dispatchAssistantAction\", action);\r\n    if (action) {\r\n      switch (action.type) {\r\n        case \"play_sound\":\r\n          console.log('needs to play right now ');\r\n          play();\r\n          break;\r\n        case \"choose_level\":\r\n          switch (action.data) {\r\n            case \"фото\":\r\n              mode.current = 0;\r\n              linkToGame();\r\n              break;\r\n            case \"описанию\":\r\n              mode.current = 1;\r\n              linkToGame();\r\n              break;\r\n            case \"описание\":\r\n              mode.current = 1;\r\n              linkToGame();\r\n              break;\r\n            /*case \"звуку\":\r\n              mode.current = 2;\r\n              linkToGame();\r\n              break;\r\n            case \"звук\":\r\n              mode.current = 2;\r\n              linkToGame();\r\n              break;\r\n            default:\r\n              break;*/\r\n          }\r\n          break;\r\n\r\n        case \"mode_of_game\":\r\n          switch (action.data) {\r\n            case \"тренировки\":\r\n              setPlayOrPractice(0);\r\n\r\n              break;\r\n            case \"тренировка\":\r\n              setPlayOrPractice(0);\r\n\r\n              break;\r\n            case \"игровой\":\r\n              setPlayOrPractice(1);\r\n\r\n              break;\r\n            case \"игра\":\r\n              setPlayOrPractice(1);\r\n\r\n              break;\r\n            case \"игры\":\r\n              setPlayOrPractice(1);\r\n\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          break;\r\n        case \"input_answer\":\r\n          refAnswer.current = action.data;\r\n          setAns(action.data);\r\n          break;\r\n        case \"send_answer\":\r\n          processCard();\r\n          break;\r\n        case \"go_home\":\r\n          history.push(\"/\");\r\n          assistant.current?.sendData({\r\n            action: { action_id: \"goneback\", payload: {} },\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/game\" exact>\r\n        <Game\r\n          mode ={mode.current}\r\n          playOrPractice={playOrPractice}\r\n          sumTime={sumTime}\r\n          setCounter={setCounter}\r\n          answer={refAnswer}\r\n          processCard={processCard}\r\n          picture={picture}\r\n          generateNewAnimal={generateNewAnimal}\r\n          amountOfSolvedQuestions={amountOfSolvedQuestions}\r\n          text={text}\r\n          ans={ans}\r\n          setAns={setAns}\r\n          counter={counter}\r\n          assistant={assistant}\r\n          isListening={isListening}\r\n          isPlaying={isPlaying}\r\n          playButtonText={playButtonText}\r\n          setPlayButtonText={setPlayButtonText}\r\n        />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <Home\r\n          linkToGame={linkToGame}\r\n          mode={mode}\r\n          setPlayOrPractice={setPlayOrPractice}\r\n          setCounter={setCounter}\r\n          playOrPractice={playOrPractice}\r\n          amountOfSolvedQuestions={amountOfSolvedQuestions}\r\n          solvedQuestions={solvedQuestions}\r\n        />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// GlobalStyle.tsx\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\r\nimport {\r\n    text, // Цвет текста\r\n    background, // Цвет подложки\r\n    gradient, // Градиент\r\n} from '@sberdevices/plasma-tokens';\r\n\r\nconst DocumentStyle = createGlobalStyle`\r\n    html:root {\r\n        min-height: 100vh;\r\n        color: ${text};\r\n        background-color: ${background};\r\n        background-image: ${gradient};\r\n    }\r\n`;\r\nconst ThemeStyle = createGlobalStyle(darkSber);\r\nexport const GlobalStyle = () => (\r\n    <>\r\n        <DocumentStyle />\r\n        <ThemeStyle />\r\n    </>\r\n);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { ToastProvider } from \"@sberdevices/plasma-ui\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { DeviceThemeProvider } from \"@sberdevices/plasma-ui/components/Device\"; // Типографика, имеющая размеры, зависимые от типа устройства\r\nimport { GlobalStyle } from \"./GlobalStyle\"; // Тема оформления (цветовая схема)\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <DeviceThemeProvider>\r\n    <GlobalStyle />\r\n    <Router>\r\n      <ToastProvider>\r\n        <App />\r\n      </ToastProvider>\r\n    </Router>\r\n  </DeviceThemeProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}