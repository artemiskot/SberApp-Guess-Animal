{"version":3,"sources":["lionpic.jpg","hear.jpg","opisanie.jpg","media.js","Home.js","Timer.js","Game.js","APIHelper.js","App.js","reportWebVitals.js","GlobalStyle.tsx","index.js"],"names":["useMediaQuery","query","mediaMatch","window","matchMedia","useState","matches","setMatches","useEffect","handler","e","addListener","removeListener","Home","mode","setPlayOrPractice","playOrPractice","linkToGame","setCounter","amountOfSolvedQuestions","solvedQuestions","icons","texts","disabled","isRowBased","useHistory","style","display","justifyContent","marginBottom","marginTop","focus","outlined","size","view","scaleOnPress","focus-visible","map","_","i","isActive","tabIndex","contentLeft","onClick","flexDirection","alignItems","width","margin","src","lion","height","text","scaleOnInteraction","stretch","current","opisanie","format","time","minutes","Math","floor","seconds","padTime","customStyles","content","color","backgroundColor","background","backgroundImage","gradient","top","left","right","bottom","marginRight","transform","borderRadius","padding","Timer","subtitle","counter","history","React","modalIsOpen","setIsOpen","counterRest","setCounterRest","timer","setTimeout","c","clearTimeout","push","ariaHideApp","isOpen","onAfterOpen","ref","_subtitle","textAlign","String","length","Game","answer","assistant","generateNewAnimal","processCard","picture","sumTime","ans","setAns","status","isListening","isPlaying","playButtonText","setPlayButtonText","sendData","action","action_id","payload","param","scaleOnFocus","maxHeight","cover","value","label","undefined","onChange","v","target","toLowerCase","lines","renderMode","API_URL","a","axios","get","params","data","console","log","withRouter","sound","setSound","useSound","volume","play","stop","useRef","name","setName","setPicture","setText","useToast","showToast","hideToast","setSumTime","refAnswer","refName","getRandomAnimal","then","x","id","description","getState","createAssistant","on","event","dispatchAssistantAction","type","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","ThemeStyle","darkSber","GlobalStyle","ReactDOM","render","Device","document","getElementById"],"mappings":"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","file":"static/js/main.3a6dd0a0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lionpic.e6022f19.jpg\";","export default __webpack_public_path__ + \"static/media/hear.32c7908f.jpg\";","export default __webpack_public_path__ + \"static/media/opisanie.5766be14.jpg\";","import { useEffect, useState } from \"react\";\n\nexport const useMediaQuery = (query) => {\n  const mediaMatch = window.matchMedia(query);\n  const [matches, setMatches] = useState(mediaMatch.matches);\n\n  useEffect(() => {\n    const handler = (e) => setMatches(e.matches);\n    mediaMatch.addListener(handler);\n    return () => mediaMatch.removeListener(handler);\n  });\n  return matches;\n};\n","import hear from \"./hear.jpg\";\nimport lion from \"./lionpic.jpg\";\nimport opisanie from \"./opisanie.jpg\";\nimport { IconRefresh } from \"@sberdevices/plasma-icons\";\nimport { IconTimerFill } from \"@sberdevices/plasma-icons\";\nimport { useHistory, withRouter } from \"react-router-dom\";\nimport { useMediaQuery } from \"./media\";\n\nimport { Container } from \"@sberdevices/plasma-ui/components/Grid\";\nimport { Button, P } from \"@sberdevices/plasma-ui\";\nimport { Display3,Row,Col } from \"@sberdevices/plasma-ui\";\nimport { useState } from \"react\";\nimport {\n  Card,\n  Icon,\n  CardBody,\n  CardContent,\n  CardMedia,\n  Tabs,\n  TabItem,\n  TextBoxSubTitle,\n  TextBoxBiggerTitle,\n  TextBoxBigTitle,\n  TextBox,\n} from \"@sberdevices/plasma-ui\";\nconst Home = ({\n  mode,\n  setPlayOrPractice,\n  playOrPractice,\n  setCounter,\n  amountOfSolvedQuestions,\n  solvedQuestions,\n  linkToGame,\n}) => {\n  const icons = [<IconRefresh />, <IconTimerFill />];\n  const outlined = false;\n  const items = [0, 0];\n  const texts = [\"Режим тренировки\", \"Режим игровой\"];\n  const disabled = false;\n  const history = useHistory();\n\n  const isRowBased = useMediaQuery(\"(min-width: 1000px)\");\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          marginBottom: \"0.5rem\",\n          marginTop: \"1rem\",\n        }}\n      >\n        <Display3>Отгадай Животное</Display3>\n      </div>\n      <div\n        focus={true}\n        outlined={true}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              marginBottom: \"0.5rem\",\n              }}\n      >\n          <Tabs\n            size={isRowBased ? \"l\" : \"s\"}\n            view={\"secondary\"}\n            scaleOnPress={true}   \n            outlined={true}\n            //outlined={!disabled && outlined}\n            disabled={disabled}\n            focus-visible={true}\n\n            //focused={true}\n          >\n            {items.map((_, i) => (\n              <TabItem\n                key={`item:${i}`}\n                isActive={i === playOrPractice}\n                tabIndex={!disabled ? i : -1}\n                contentLeft={icons[i]}\n                onClick={() => !disabled && setPlayOrPractice(i)}\n              >\n                {texts[i]}\n              </TabItem>\n            ))}\n          </Tabs>\n        </div>\n\n      <div\n        style={{\n          flexDirection: isRowBased ? \"row\" : \"column\",\n          marginBottom: isRowBased ? \"0rem\" : \"10rem\",\n          display: \"flex\",\n          //justifyContent: \"center\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          //flexGrow: \"1\",\n          //flexShrink: \"1\",\n          marginBottom: \"10rem\",\n        }}\n      >\n        <Card\n          style={{\n            display: \"flex\",\n            width: \"18.5rem\",\n            margin: \"0.5rem\",\n            justifyContent: \"center\",\n          }}\n        >\n          <CardBody>\n            <CardMedia src={lion} height={\"9rem\"}/>\n            <CardContent>\n              <TextBox>\n                <TextBoxBigTitle>{\"Угадай по фото\"}</TextBoxBigTitle>\n                <TextBoxSubTitle>\n                  {\n                    \"Необходимо понять о каком животном идет речь по изображению\"\n                  }\n                </TextBoxSubTitle>\n              </TextBox>\n              <Button\n                text=\"Начать\"\n                view=\"primary\"\n                size=\"s\"\n                scaleOnInteraction={true}\n                outlined={true}\n                stretch\n                style={{ marginTop: \"1em\" }}\n                tabIndex={-1}\n                onClick={() => {\n                  mode.current = 0; \n                  linkToGame();\n                }}\n              />\n            </CardContent>\n          </CardBody>\n        </Card>\n        <Card style={{ width: \"18.5rem\", margin: \"0.5rem\" }}>\n          <CardBody>\n            <CardMedia src={opisanie} height={\"9rem\"} />\n            <CardContent>\n              <TextBox>\n                <TextBoxBigTitle>{\"Угадай по описанию\"}</TextBoxBigTitle>\n\n                <TextBoxSubTitle>\n                  {\n                    \"Необходимо понять о каком животном идет речь по текстовому описанию\"\n                  }\n                </TextBoxSubTitle>\n              </TextBox>\n              <Button\n                text=\"Начать\"\n                view=\"primary\"\n                size=\"s\"\n                scaleOnInteraction={true}\n                outlined={true}\n                stretch\n                style={{ marginTop: \"1em\" }}\n                tabIndex={-1}\n                onClick={() => {\n                  mode.current = 1;\n                  linkToGame();\n                }}\n              />\n            </CardContent>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal from \"react-modal\";\nimport { Button } from \"@sberdevices/plasma-ui\";\n\nimport { text, background, gradient } from \"@sberdevices/plasma-tokens\";\nimport { IconHouse } from \"@sberdevices/plasma-icons\";\nimport \"./Modal.css\";\n\nimport { Headline2 } from \"@sberdevices/plasma-ui\";\nimport { BrowserRouter as Router, useHistory } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nconst format = (time) => {\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  return `${minutes}:${padTime(seconds)}`;\n};\nconst customStyles = {\n  content: {\n    color: `${text}`,\n    backgroundColor: `${background}`,\n    backgroundImage: `${gradient}`,\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    borderRadius: \"1em\",\n    padding: \"1em\",\n    width: \"30rem\",\n  },\n};\n\nexport const Timer = ({ counter, setCounter, amountOfSolvedQuestions }) => {\n  const history = useHistory();\n\n  var subtitle;\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n\n  function afterOpenModal() {\n    subtitle.style.color = \"\";\n    setCounterRest(7);\n  }\n\n  const [counterRest, setCounterRest] = React.useState(30);\n  React.useEffect(() => {\n    setCounter(counter);\n  }, [counter]);\n  React.useEffect(() => {\n    let timer;\n    if (counter > 0) {\n      timer = setTimeout(() => setCounter((c) => c - 1), 1000);\n    } else if (counter === 0) {\n      setIsOpen(true);\n    }\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [counter]);\n  React.useEffect(() => {\n    let timer;\n    if (counterRest > 0) {\n      timer = setTimeout(() => setCounterRest((c) => c - 1), 1000);\n    } else if (counter === 0) {\n      history.push(\"/\");\n      setIsOpen(false);\n      setCounter(counter);\n    }\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [counterRest]);\n  return (\n    <div>\n      {counter !== 0 && (\n        <Headline2 style={{ marginTop: \"1rem\" }}>\n          Время: {format(counter)}\n        </Headline2>\n      )}\n      <div>\n        <Modal\n          ariaHideApp={false}\n          isOpen={modalIsOpen}\n          onAfterOpen={afterOpenModal}\n          style={customStyles}\n        >\n          <h2\n            ref={(_subtitle) => (subtitle = _subtitle)}\n            style={{ textAlign: \"center\" }}\n          >\n            Ой-ой, время вышло!\n          </h2>\n          <h3\n            ref={(_subtitle) => (subtitle = _subtitle)}\n            style={{ textAlign: \"center\" }}\n          >\n            Правильно {amountOfSolvedQuestions.current - 1} из 10\n          </h3>\n          <div style={{ textAlign: \"center\" }}>\n            <Headline2>Возврат домой через</Headline2>\n            <br />\n            {counterRest !== 0 && <Headline2>{format(counterRest)}</Headline2>}\n          </div>\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nconst padTime = (time) => {\n  return String(time).length === 1 ? `0${time}` : `${time}`;\n};\n","import { Container } from \"@sberdevices/plasma-ui/components/Grid\";\nimport { Timer } from \"./Timer\";\nimport { useState, useEffect } from \"react\";\nimport { Row, Col } from \"@sberdevices/plasma-ui\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMediaQuery } from \"./media\";\n\nimport {\n  Card,\n  CardBody,\n  CardContent,\n  CardMedia,\n  CardHeadline1,\n  Button,\n  TextBox,\n  cover,\n  TextBoxBiggerTitle,\n  TextBoxSubTitle,\n  TextBoxBigTitle,\n  TextField,\n  CardParagraph1,\n  Headline4,\n} from \"@sberdevices/plasma-ui\";\nimport { IconVolumeAlt2 } from \"@sberdevices/plasma-icons\";\n\nconst Game = ({\n  mode,\n  playOrPractice,\n  answer,\n  assistant,\n  generateNewAnimal,\n  amountOfSolvedQuestions,\n  processCard,\n  picture,\n  text,\n  sumTime,\n  ans,\n  setAns,\n  setCounter,\n  counter,\n  isListening,\n  isPlaying,\n  playButtonText,\n  setPlayButtonText\n}) => {\n  const status = [\"success\", \"error\", \"\"];\n  const history = useHistory();\n  useEffect(() => {\n    generateNewAnimal();\n  }, []);\n  useEffect(() => {\n    answer.current = ans;\n  }, [ans]);\n  useEffect(() => {\n    if (amountOfSolvedQuestions.current > 10) {\n      {\n        assistant.current?.sendData({\n          action: { action_id: \"gamefinish\", payload: {} },\n        });\n      }\n    }\n  }, [amountOfSolvedQuestions.current]);\n  const isRowBased = useMediaQuery(\"(min-width: 1000px)\");\n\n  const renderMode = (param) => {\n    switch (param) {\n      case 0:\n        return (\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n            <Card\n              style={{\n                width: isRowBased ? \"22rem\" : \"18rem\",\n                marginTop: \"1rem\",\n              }}\n              tabIndex={-1}\n              outlined={false}\n              scaleOnFocus={false}\n            >\n              <CardBody>\n                <CardMedia style={{ maxHeight: \"16.5rem\" }} src={picture} />\n                <CardContent cover={cover}>\n                  <TextBox>\n                    <TextBoxBigTitle>{\"Какое это животное?\"}</TextBoxBigTitle>\n                  </TextBox>\n                  <TextField\n                    style={{ marginTop: \"1rem\" }}\n                    value={ans}\n                    label={\"Ответ\"}\n                    //   helperText={\"Helper text\"}\n                    disabled={false}\n                    status={status !== \"\" ? status : undefined}\n                    onChange={(v) => setAns(v.target.value.toLowerCase())}\n                  />\n                  <Button\n                    style={{ marginTop: \"1rem\" }}\n                    onClick={() => {\n                      processCard();\n                    }}\n                  >\n                    Ответить\n                  </Button>\n                </CardContent>\n              </CardBody>\n            </Card>\n          </div>\n        );\n      case 1:\n        return (\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n            <Card\n              style={{\n                width: isRowBased ? \"30rem\" : \"20rem\",\n                marginTop: \"1rem\",\n              }}\n              tabIndex={-1}\n              outlined={false}\n              scaleOnFocus={false}\n            >\n              <CardBody>\n                {/* <CardMedia style={{ width: \"30rem\" }} src={picture} /> */}\n                <CardContent cover={cover}>\n                  <TextBox>\n                    <CardParagraph1 style={{ marginTop: \"0.75rem\" }} lines={6}>\n                      <Headline4>\n                        <em>{text}</em>\n                      </Headline4>\n                    </CardParagraph1>\n\n                    <TextBoxBigTitle style={{ marginTop: \"2rem\" }}>\n                      {\"Какое это животное?\"}\n                    </TextBoxBigTitle>\n                  </TextBox>\n                  <TextField\n                    style={{ marginTop: \"1rem\" }}\n                    value={ans}\n                    label={\"Ответ\"}\n                    //   helperText={\"Helper text\"}\n                    disabled={false}\n                    status={status !== \"\" ? status : undefined}\n                    onChange={(v) => setAns(v.target.value.toLowerCase())}\n                  />\n                  <Button\n                    style={{ marginTop: \"1rem\" }}\n                    onClick={() => {\n                      processCard();\n                    }}\n                  >\n                    Ответить\n                  </Button>\n                </CardContent>\n              </CardBody>\n            </Card>\n          </div>\n        );\n      /*case 2:\n        return (\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n            <Card\n              style={{\n                width: isRowBased ? \"30rem\" : \"20rem\",\n                marginTop: \"1rem\",\n              }}\n              tabIndex={-1}\n              outlined={false}\n              scaleOnFocus={false}\n            >\n              <CardBody>\n                <CardContent cover={cover}>\n                  <Button\n                    style={{ marginTop: \"1rem\" }}\n                    onClick={() => {\n                       isListening();\n                    }}\n                    text={playButtonText}\n                    view={\"primary\"}\n                    contentLeft={<IconVolumeAlt2 />}\n                  />\n                  <TextBox>\n                    <TextBoxBigTitle style={{ marginTop: \"1rem\" }}>\n                      {\"Какое животное издает этот звук?\"}\n                    </TextBoxBigTitle>\n                  </TextBox>\n                  <TextField\n                    style={{ marginTop: \"1rem\" }}\n                    value={ans}\n                    label={\"Ответ\"}\n                    //   helperText={\"Helper text\"}\n                    disabled={false}\n                    status={status !== \"\" ? status : undefined}\n                    onChange={(v) => setAns(v.target.value)}\n                  />\n                  <Button\n                    style={{ marginTop: \"1rem\" }}\n                    onClick={() => {\n                      processCard();\n                    }}\n                  >\n                    Ответить\n                  </Button>\n                </CardContent>\n              </CardBody>\n            </Card>\n          </div>\n        );*/\n    }\n  };\n\n  return (\n    <Container style={{ marginBottom: \"10rem\" }}>\n      {amountOfSolvedQuestions.current > 10 ? (\n        <div>\n          <Container>\n            {playOrPractice == 0 ? (\n              <h1>Тренировка окончена</h1>\n            ) : (\n              <div>\n                <h1>Игра окончена</h1>\n                <h2>Потрачено времени: {sumTime} секунды</h2>\n              </div>\n            )}\n\n            <h2>Выучены {amountOfSolvedQuestions.current - 1} животных</h2>\n\n            <Button\n              onClick={() => {\n                history.push(\"/\");\n                assistant.current?.sendData({\n                  action: { action_id: \"goneback\", payload: {} },\n                });\n              }}\n            >\n              Домой\n            </Button>\n          </Container>\n        </div>\n      ) : (\n        <div>\n          {playOrPractice == 0 ? (\n            <></>\n          ) : (\n            <Timer\n              style={{ textAlign: \"right\" }}\n              counter={counter}\n              setCounter={setCounter}\n              amountOfSolvedQuestions={amountOfSolvedQuestions}\n            />\n          )}\n          <div>{renderMode(mode)}</div>\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default Game;\n","import axios from \"axios\";\n\nconst API_URL = \"https://animalsquiz.herokuapp.com/\";\n\nexport async function getRandomAnimal(solvedQuestions) {\n  const { data: answer } = await axios.get(API_URL + \"randomAnimal/\", {\n    params: {\n      solvedQuestions: solvedQuestions,\n    },\n  });\n  console.log(\"приходит\", solvedQuestions);\n  return answer;\n}\n","import Home from \"./Home.js\";\nimport Game from \"./Game.js\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { useHistory, withRouter } from \"react-router-dom\";\nimport { getRandomAnimal } from \"./APIHelper.js\";\nimport { Toast } from \"@sberdevices/plasma-ui\";\nimport { useToast, Button } from \"@sberdevices/plasma-ui\";\nimport useSound from \"use-sound\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  createSmartappDebugger,\n  createAssistant,\n} from \"@sberdevices/assistant-client\";\nconst initializeAssistant = (getState /*: any*/) => {\n  if (process.env.NODE_ENV === \"development\") {\n    return createSmartappDebugger({\n      token:\n      process.env.REACT_APP_TOKEN  ??\n        \"\",\n      initPhrase: `Запусти Отгадай животное`,\n      getState,\n    });\n  }\n  return createAssistant({ getState });\n};\nfunction App() {\n  const [counter, setCounter] = useState(40);\n  const [sound, setSound] = useState(\"\");\n  const [play, { stop, isPlaying }] = useSound(sound, { volume: 0.75 });\n  const [playButtonText, setPlayButtonText] = useState(\"Прослушать\");\n  const history = useHistory();\n  const solvedQuestions = useRef(\"\");\n  const amountOfSolvedQuestions = useRef(0);\n  const [name, setName] = useState(\"\");\n  const [picture, setPicture] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [ans, setAns] = useState(\"\");\n  const { showToast, hideToast } = useToast();\n  const [sumTime, setSumTime] = useState(0);\n  useEffect(() => {\n    setSumTime(sumTime + 1);\n  }, [counter]);\n  useEffect(() => {\n    if (!isPlaying) {\n      setPlayButtonText(\"Прослушать\");\n    }\n  }, [isPlaying]); \n  const refAnswer = useRef(\"\");\n  const refName = useRef();\n  const processCard = async () => {\n    console.log(\"Ответ юзера\", refAnswer.current);\n    console.log(\"Ответ правильный\", name);\n\n    if (refAnswer.current === refName.current) {\n      await generateNewAnimal();\n      showToast(`Верно!`, \"top\", 1000);\n      setCounter(40);\n      refAnswer.current = \"\";\n    } else {\n      if (playOrPractice == 0) {\n        showToast(`Ошибка! Правильный ответ: ${refName.current}`, \"top\");\n      } else {\n        showToast(\"Ошибка!\", \"top\", 1000);\n      }\n    }\n    setAns(\"\");\n  };\n  const generateNewAnimal = () => {\n    console.log(solvedQuestions.current);\n    getRandomAnimal(solvedQuestions.current).then((x) => {\n      if (solvedQuestions.current == \"\") {\n        solvedQuestions.current += `${x.id}`;\n        console.log(solvedQuestions.current);\n      } else {\n        solvedQuestions.current += \",\" + `${x.id}`;\n      }\n      amountOfSolvedQuestions.current++;\n      console.log(x);\n      setPicture(x.picture);\n      setName(x.name);\n      setText(x.description);\n      setSound(x.sound);\n      refName.current = x.name;\n    });\n  };\n  const linkToGame = () => {\n    console.log(mode.current);\n    if(mode.current == 2){\n      assistant.current?.sendData({ action: { action_id: \"playSound\", payload: {} } });\n    } else{ \n      assistant.current?.sendData({ action: { action_id: \"game\", payload: {} } });\n    }\n\n    amountOfSolvedQuestions.current = 0;\n    solvedQuestions.current = \"\";\n    setCounter(40);\n    setSumTime(0);\n\n    history.push(\"/game\");\n  };\n  const mode = useRef(0);\n  const [playOrPractice, setPlayOrPractice] = useState(0);\n  const assistant = useRef();\n  useEffect(() => {\n    assistant.current = initializeAssistant(() => getStateForAssistant());\n    assistant.current.on(\"start\", (event) => {\n      //console.log(`assistant.on(start)`, event);\n    });\n\n    assistant.current.on(\"data\", (event /*: any*/) => {\n     //console.log(`assistant.on(data)`, event);\n      const { action } = event;\n\n      dispatchAssistantAction(action);\n    });\n  }, []);\n\n  function getStateForAssistant() {\n    return undefined;\n  }\n  const  isListening = () => {\n    if (isPlaying) {\n      stop();\n    } else {\n      play();\n      setPlayButtonText(\"Остановить\");\n    }\n  }\n  const dispatchAssistantAction = async (action) => {\n    console.log(\"dispatchAssistantAction\", action);\n    if (action) {\n      switch (action.type) {\n        case \"play_sound\":\n          console.log('needs to play right now ');\n          play();\n          break;\n        case \"choose_level\":\n          switch (action.data) {\n            case \"фото\":\n              mode.current = 0;\n              linkToGame();\n              break;\n            case \"описанию\":\n              mode.current = 1;\n              linkToGame();\n              break;\n            case \"описание\":\n              mode.current = 1;\n              linkToGame();\n              break;\n            /*case \"звуку\":\n              mode.current = 2;\n              linkToGame();\n              break;\n            case \"звук\":\n              mode.current = 2;\n              linkToGame();\n              break;\n            default:\n              break;*/\n          }\n          break;\n\n        case \"mode_of_game\":\n          switch (action.data) {\n            case \"тренировки\":\n              setPlayOrPractice(0);\n\n              break;\n            case \"тренировка\":\n              setPlayOrPractice(0);\n\n              break;\n            case \"игровой\":\n              setPlayOrPractice(1);\n\n              break;\n            case \"игра\":\n              setPlayOrPractice(1);\n\n              break;\n            case \"игры\":\n              setPlayOrPractice(1);\n\n              break;\n            default:\n              break;\n          }\n          break;\n        case \"input_answer\":\n          refAnswer.current = action.data;\n          setAns(action.data);\n          break;\n        case \"send_answer\":\n          processCard();\n          break;\n        case \"go_home\":\n          history.push(\"/\");\n          assistant.current?.sendData({\n            action: { action_id: \"goneback\", payload: {} },\n          });\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n  return (\n    <Switch>\n      <Route path=\"/game\" exact>\n        <Game\n          mode ={mode.current}\n          playOrPractice={playOrPractice}\n          sumTime={sumTime}\n          setCounter={setCounter}\n          answer={refAnswer}\n          processCard={processCard}\n          picture={picture}\n          generateNewAnimal={generateNewAnimal}\n          amountOfSolvedQuestions={amountOfSolvedQuestions}\n          text={text}\n          ans={ans}\n          setAns={setAns}\n          counter={counter}\n          assistant={assistant}\n          isListening={isListening}\n          isPlaying={isPlaying}\n          playButtonText={playButtonText}\n          setPlayButtonText={setPlayButtonText}\n        />\n      </Route>\n      <Route path=\"/\">\n        <Home\n          linkToGame={linkToGame}\n          mode={mode}\n          setPlayOrPractice={setPlayOrPractice}\n          setCounter={setCounter}\n          playOrPractice={playOrPractice}\n          amountOfSolvedQuestions={amountOfSolvedQuestions}\n          solvedQuestions={solvedQuestions}\n        />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default withRouter(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// GlobalStyle.tsx\nimport { createGlobalStyle } from 'styled-components';\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\nimport {\n    text, // Цвет текста\n    background, // Цвет подложки\n    gradient, // Градиент\n} from '@sberdevices/plasma-tokens';\n\nconst DocumentStyle = createGlobalStyle`\n    html:root {\n        min-height: 100vh;\n        color: ${text};\n        background-color: ${background};\n        background-image: ${gradient};\n    }\n`;\nconst ThemeStyle = createGlobalStyle(darkSber);\nexport const GlobalStyle = () => (\n    <>\n        <DocumentStyle />\n        <ThemeStyle />\n    </>\n);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ToastProvider } from \"@sberdevices/plasma-ui\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport { DeviceThemeProvider } from \"@sberdevices/plasma-ui/components/Device\"; // Типографика, имеющая размеры, зависимые от типа устройства\nimport { GlobalStyle } from \"./GlobalStyle\"; // Тема оформления (цветовая схема)\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <DeviceThemeProvider>\n    <GlobalStyle />\n    <Router>\n      <ToastProvider>\n        <App />\n      </ToastProvider>\n    </Router>\n  </DeviceThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}